package org.leetcode.shunxu.ch450;

/**
 * <p>409. 最长回文串
 *
 * <p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。
 *
 * <p>在构造过程中，请注意区分大小写。比如 "Aa" 不能当做一个回文字符串。
 *
 * <p>注意:
 * <p>假设字符串的长度不会超过 1010。
 *
 * <p>示例 1:
 *
 * <p>输入:
 * <p>"abccccdd"
 *
 * <p>输出:
 * <p>7
 *
 * <p>解释:
 * <p>我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。
 * <p>https://leetcode-cn.com/problems/longest-palindrome/
 *
 * @author: wangrui
 * @date: 2021/3/3
 */
public class Ch409LongestPalindrome {

  /**
   * <p>方法一：贪心
   *
   * <p>思路
   *
   * <p>回文串是一个正着读和反着读都一样的字符串。以回文中心为分界线，对于回文串中左侧的字符 ch，在右侧对称的位置也会出现同样的字符。
   * <p>例如在字符串 "abba" 中，回文中心是 "ab|ba" 中竖线的位置，而在字符串 "abcba" 中，回文中心是 "ab(c)ba" 中的字符 "c" 本身。
   * <p>我们可以发现，在一个回文串中，只有最多一个字符出现了奇数次，其余的字符都出现偶数次。
   * <p>那么我们如何通过给定的字符构造一个回文串呢？我们可以将每个字符使用偶数次，使得它们根据回文中心对称。在这之后，如果有剩余的字符，
   * <p>我们可以再取出一个，作为回文中心。
   * <p>算法
   * <p>对于每个字符 ch，假设它出现了 v 次，我们可以使用该字符 v / 2 * 2 次，在回文串的左侧和右侧分别放置 v / 2 个字符 ch，其中 / 为整数除法。
   * <p>例如若 "a" 出现了 5 次，那么我们可以使用 "a" 的次数为 4，回文串的左右两侧分别放置 2 个 "a"。
   * <p>如果有任何一个字符 ch 的出现次数 v 为奇数（即 v % 2 == 1），那么可以将这个字符作为回文中心，注意只能最多有一个字符作为回文中心。
   * <p>在代码中，我们用 ans 存储回文串的长度，由于在遍历字符时，ans 每次会增加 v / 2 * 2，因此 ans 一直为偶数。但在发现了第一个出现次数为奇数的字符后，
   * <p>我们将 ans 增加 1，这样 ans 变为奇数，在后面发现其它出现奇数次的字符时，我们就不改变 ans 的值了。
   * <p>"abccccdd"
   * <p>输出:
   * <p>7
   * <p>解释:555555
   * <p>我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。
   *
   * @param s
   * @return
   */
  public int longestPalindrome(String s) {
    //字符对应java 数字的范围
    int[] count = new int[123];
    int length = s.length();
    for (int i = 0; i < length; ++i) {
      char c = s.charAt(i);
      count[c]++;
    }

    int ans = 0;
    //222
    for (int v : count) {
      ans += v / 2 * 2;
      //如果v 是奇数，而且现在ans 为奇数。那么可以有一个回文中心
      if (v % 2 == 1 && ans % 2 == 0) {
        ans++;
      }
    }
    return ans;
  }
}

