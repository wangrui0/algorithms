package org.company.meituan.all.week02.done;

/**
 * <p>191. 位1的个数
 * <p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 *
 *
 * <p>提示：
 *
 * <p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * <p>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 *
 *
 * <p>示例 1：
 *
 * <p>输入：00000000000000000000000000001011
 * <p>输出：3
 * <p>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * <p>示例 2：
 *
 * <p>输入：00000000000000000000000010000000
 * <p>输出：1
 * <p>解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * <p>示例 3：
 *
 * <p>输入：11111111111111111111111111111101
 * <p>输出：31
 * <p>解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 *
 * <p>提示：
 *
 * <p>输入必须是长度为 32 的 二进制串 。
 *
 *
 * <p>进阶：
 *
 * <p>如果多次调用这个函数，你将如何优化你的算法？
 * <p>通过次数162,135提交次数219,140
 * <p>贡献者
 * <p>LeetCode
 * <p>191/2088
 *
 * <p>智能模式
 *
 * <p>模拟面试
 *
 *
 *
 *
 *
 *
 * <p>123456
 * <p>public class Solution {
 * <p>    // you need to treat n as an unsigned value
 * <p>    public int hammingWeight(int n) {
 *
 * <p>    }
 * <p>}
 * <p>贡献
 * <p>https://leetcode-cn.com/problems/number-of-1-bits/
 * <p>@Author: shenpei
 * <p>@Date: 2021/5/17 6:55 下午
 */
public class NCh075_191_numberOf1Bits位1的个数 {

  /**
   * <p> 循环检查
   * <p>  复杂度分析
   *
   * <p>  时间复杂度：O(k)，
   *
   * <p>  空间复杂度：O(1)，我们只需要常数的空间保存若干变量。
   *
   * @param n
   * @return
   */
  public int hammingWeight_1(int n) {
    int ret = 0;
    for (int i = 0; i < 32; i++) {
      if ((n & (1 << i)) != 0) {
        ret++;
      }
    }
    return ret;
  }

  /**
   * <p>复杂度分析
   *
   * <p>   时间复杂度：O(logn)。循环次数等于 n 的二进制位中 1 的个数，最坏情况下 n 的二进制位全部为 1。我们需要循环 logn 次。
   *
   * <p>  空间复杂度：O(1)，我们只需要常数的空间保存若干变量。
   *
   * <p>  位运算优化
   *
   * @param n
   * @return
   */
  /**
   * <p>思路及解法
   *
   * <p> 观察这个运算：n & (n−1)，其运算结果恰为把 n 的二进制位中的最低位的 1 变为 0 之后的结果。
   *
   * <p> 如：6 & (6−1)=4,6=(110),4=(100)，运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0 之后的结果。
   *
   * <p> 这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 n 与 n−1 做与运算，直到 n 变为 0 即可。因为每次运算会使得 n 的最低位的 1 被翻转，因此运算次数就等于 n 的二进制位中
   * 1 的个数。
   *
   * @param n
   * @return
   */
  public int hammingWeight_2(int n) {
    int ret = 0;
    while (n != 0) {
      n &= n - 1;
      ret++;
    }
    return ret;
  }
}
